
grammar Redcode
  rule instruction
    lbl:( label s_ ":" )? s_ operation S_ a:operand s_ "," s_ b:operand <Instruction>
    /
    lbl:( label s_ ":" )? s_ operation S_ a:operand <Instruction>
  end
  
  rule operand
    primary {
      def value
        {
          :expression => primary.value,
          :mode       => nil
        }
      end
    }
    /
    mode primary {
      def value
        {
          :expression => primary.value,
          :mode       => mode.text_value
        }
      end
    }
  end
  
  rule operation
    opcode m:( "." modifier )? <Operation>
  end
  
  rule opcode
    "dat" / "mov" / "add" / "sub" / "mul" / "div" / "mod" / "jmp" / "jmz" / "jmn" / "djn" / "cmp" / "slt" / "spl" / "org" / "equ" / "end"
  end
  
  rule modifier
    "a" / "b" / "ab" / "ba" / "f" / "x" / "i"
  end
  
  rule mode
    "#" / "$" / "@" / "<" / ">"
  end
  
  rule primary
    label
    /
    number
  end
  
  rule label
    [a-zA-Z] [a-zA-Z0-9_]* {
      def value
        self.text_value
      end
    }
  end
  
  rule number
    [0-9]+ {
      def value
        self.text_value.to_i
      end
    }
  end
  
  rule s_
    space*
  end
  
  rule S_
    space+
  end

  rule space
    [ \t\r\n]
  end
end


